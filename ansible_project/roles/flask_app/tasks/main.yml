-name: Ensure all the packages are up to date
apt:
    upgrade: dist                        #Perform a full distribution upgrade
    update_cache: yes
    become: yes                        # Execute as root
-name: Install standard CA certificates 
  apt:
    name: ca-certificates
    state: present
    become: yes

-name: Copy custom CA certificates
 copy:
    src: “{{ item }}”
    dest: /usr/local/share/ca-certificates/
    owner: root
    group: root
    mode: 0644
    become: yes
 with_items: “{{ custom_ca_certificates }}”
   


-name: update CA certificates
 command: update-ca-certificates
 become: yes

-name: update CA trust
 command: update-ca-trust
 become: yes

-name: Validate custom CA certificates
 command: openssl x509 -noout -in /usr/local/share/ca-certificates/{{item}}  -checkend 0
with_items: “{{ custom_ca_certificates }}”
register: certificate_validation
failed_when: certificate_validation.rc != 0
become: yes

-name: Ensure python3 and virtualenv are installed
 package: 
    name: “{{ item }}”
    state: present
    become: yes
 loop:
    -python3
    -python3-env
    -python3-pip

-name: Create deployment directory
 file: 
    path: “{{ deployment_location }}”
    state: directory
    owner: root
    group: root
    mode: 0755
    become: yes

-name: Create a virtual environment
 command: python3 -m venv “{{ venv_path }}”
 args:
    creates: “{{ venv_path }}/bin/activate”
 become: yes

-name: Install application wheel file
 pip: 
    requirements: “{{ deployment_location }}/{{ wheel_file }}”
    virtualenv: “{{ venv_path }}”
    state: present
    become: yes

-name: Copy app.py to deployment directory
 copy:
    src:  app.py
    dest: “{{ deployment_location }}/app.py”
    owner: root
    group: root
    mode: 0755
    become: yes

-name: Create system service file or flask application 
 template:
    src: flask_app.service.j2
    dest: /etc/systemd/system/flask_app.service
    owner: root
    group: root
    mode: 0644
    become: yes

-name: Enable and start flask application service
 systemd:
    name: flask_app
    enabled: yes
    state: started
    become: yes

-name: Install UFW
 apt:
    name: ufw               # uncomplicated firewall package
    state: present
 become: yes

-name: Allow flask application port
 ufw:
    rule: allow
    port: “{{ app_port }}”
    proto: tcp
 become: yes

-name: Deny all incoming traffic by default
 ufw:
    state: enabled
    policy: deny
    direction: incoming
 become: yes

-name: Allow outgoing traffic by default
 ufw:
    state: enabled
    policy: allow
    direction: outgoing
 become: yes

-name: Ensure UFW is enabled
 ufw:
    state: enabled
 become: yes
